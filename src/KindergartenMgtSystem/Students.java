/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package KindergartenMgtSystem;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Admin
 */
public class Students extends javax.swing.JFrame {

    /**
     * Creates new form Students
     */
    public Students() {
        initComponents();
        GetParent();
        GetBus();
        DisplayStudent();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        studentIdTxt = new javax.swing.JTextField();
        studentNameTxt = new javax.swing.JTextField();
        studentAgeTxt = new javax.swing.JTextField();
        saveBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        homeBtn = new javax.swing.JButton();
        parentCbx = new javax.swing.JComboBox<>();
        busCbx = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        pickupDate = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        pickupTime = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentTbl = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Student Reg", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12), new java.awt.Color(0, 102, 255))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("StudentID");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Student Name");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Student Age");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Parent Name");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Bus Plate");

        studentAgeTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentAgeTxtActionPerformed(evt);
            }
        });

        saveBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        saveBtn.setForeground(new java.awt.Color(0, 153, 0));
        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        editBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        editBtn.setForeground(new java.awt.Color(0, 0, 255));
        editBtn.setText("Edit");
        editBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editBtnMouseClicked(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        deleteBtn.setForeground(new java.awt.Color(204, 0, 0));
        deleteBtn.setText("Delete");
        deleteBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteBtnMouseClicked(evt);
            }
        });

        homeBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        homeBtn.setText("Home");
        homeBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                homeBtnMouseReleased(evt);
            }
        });
        homeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeBtnActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Bus Pickup Date");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Bus Pickup Time");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(homeBtn)
                        .addGap(113, 113, 113)
                        .addComponent(saveBtn)
                        .addGap(18, 18, 18)
                        .addComponent(editBtn)
                        .addGap(18, 18, 18)
                        .addComponent(deleteBtn)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(74, 74, 74)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(studentNameTxt)
                            .addComponent(studentAgeTxt)
                            .addComponent(parentCbx, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(busCbx, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(studentIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(pickupDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pickupTime))
                        .addGap(87, 87, 87))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(studentIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentAgeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parentCbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(busCbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pickupDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(pickupTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveBtn)
                    .addComponent(editBtn)
                    .addComponent(deleteBtn)
                    .addComponent(homeBtn))
                .addContainerGap())
        );

        studentTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        studentTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentTblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(studentTbl);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel6.setText("    Students");

        jPanel2.setBackground(new java.awt.Color(0, 0, 255));
        jPanel2.setForeground(new java.awt.Color(0, 0, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 41, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(416, 416, 416)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 692, Short.MAX_VALUE)
                .addGap(19, 19, 19))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
     String dbUrl = "jdbc:postgresql://localhost:5432/kindergarten_management_db";
    String username = "postgres";
    String password = "8585";
    
    Connection con = null;
    Statement st = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    
    
    private void Clear() {
        studentIdTxt.setText("");
        studentAgeTxt.setText("");
        studentNameTxt.setText("");
        if (parentCbx.getSelectedItem() != null) {
            parentCbx.setSelectedIndex(-1);
        }

        if (busCbx.getSelectedItem() != null) {
            busCbx.setSelectedIndex(-1);
        }
        pickupDate.setDate(null);
        pickupTime.setText("");
    }
    
    
    private void GetParent(){
        
        try {
            con = DriverManager.getConnection(dbUrl, username, password);
            st = con.createStatement();
            String sql = "select * from parents;";
            rs = st.executeQuery(sql);
            while(rs.next()){
                String parentName = String.valueOf(rs.getString("parent_name"));
                parentCbx.addItem(parentName);
            }
            
            
        } catch (Exception e) {
            e.printStackTrace();
            

        } finally {
            try {
                // Close resources in a finally block to ensure they are closed even if an exception occurs
                if (con != null) con.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    private void GetBus(){
        
        try {
            con = DriverManager.getConnection(dbUrl, username, password);
            st = con.createStatement();
            String sql = "select * from buses;";
            rs = st.executeQuery(sql);
            while(rs.next()){
                String PlateNumber = String.valueOf(rs.getString("bus_plate"));
                busCbx.addItem(PlateNumber);
            }
            
            
        } catch (Exception e) {
            e.printStackTrace();
            

        } finally {
            try {
                // Close resources in a finally block to ensure they are closed even if an exception occurs
                if (con != null) con.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    private void DisplayStudent(){
        try {
            con = DriverManager.getConnection(dbUrl, username, password);
            String sql = "select * from students";
            st = con.createStatement();
            rs = st.executeQuery(sql);
            studentTbl.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                // Close resources in a finally block to ensure they are closed even if an exception occurs
                if (con != null) con.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }
    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
      
        
        if(studentIdTxt.getText().isEmpty() || studentNameTxt.getText().isEmpty() || studentAgeTxt.getText().isEmpty() 
                || parentCbx.getSelectedIndex() == -1  || busCbx.getSelectedIndex() == -1 || pickupTime.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Incomplete information");
        }else if(studentIdTxt.getText().length() != 6 || !studentIdTxt.getText().matches("[A-Z]{3}\\d{3}")) {
            JOptionPane.showMessageDialog(this, "Student ID should be in the format 'AAA999'");
        }else if(!pickupTime.getText().matches("^(1[012]|0?[1-9]):[0-5][0-9]\\s?(?:[AP]M)?$")) {
            JOptionPane.showMessageDialog(this, "Invalid pickup time format. Please use format like '1:00 AM' or '1:00 PM'");
        }else{
            java.sql.Date flightDate = null;

            // Get the selected date from the JDateChooser
            Date utilDate = pickupDate.getDate();
            if (utilDate != null) {
                // Convert the java.util.Date to java.sql.Date
                flightDate = new java.sql.Date(utilDate.getTime());
                
                // Get the current date
                java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
                
                // Compare the selected date with the current date
                if (flightDate.before(currentDate)) {
                    JOptionPane.showMessageDialog(this, "You cannot schedule on an older date.");
                    return; // Stop further processing
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select a valid pickUp date. Stopping...");
                return; // Stop further processing if date is not selected
            }
            try {
                con = DriverManager.getConnection(dbUrl, username, password);
                
                // Check if flight_code already exists
                String checkStudentQuery = "SELECT * FROM students WHERE student_id=? AND bus_pickup_date=?";
                PreparedStatement checkStudentStatement = con.prepareStatement(checkStudentQuery);
                checkStudentStatement.setString(1, studentIdTxt.getText());

                // Get the selected date from the JDateChooser
                Date utilDates = pickupDate.getDate();
                java.sql.Date pickupDate = null;
                if (utilDates != null) {
                    // Convert the java.util.Date to java.sql.Date
                    pickupDate = new java.sql.Date(utilDates.getTime());
                } else {
                    JOptionPane.showMessageDialog(this, "Please select a valid pickup date. Stopping...");
                    return; // Stop further processing if date is not selected
                }
                checkStudentStatement.setDate(2, pickupDate);

                ResultSet existingStudent = checkStudentStatement.executeQuery();

                if (existingStudent.next()) {
                    JOptionPane.showMessageDialog(this, "This student is already scheduled for pickup on the selected date.");
                    return; // Stop further processing
                }

                int studentAge = Integer.valueOf(studentAgeTxt.getText());
                String sql = "INSERT INTO students(student_id, student_name, student_age, parent_id, bus_plate, bus_pickup_date, bus_pickup_time) VALUES (?, ?, ?, ?, ?, ?, ?);";
                PreparedStatement Add = con.prepareCall(sql);
                Add.setString(1, studentIdTxt.getText());
                Add.setString(2, studentNameTxt.getText());
                Add.setInt(3, studentAge);
                Add.setString(4, parentCbx.getSelectedItem().toString());
                Add.setString(5, busCbx.getSelectedItem().toString());
                Add.setDate(6, pickupDate);
                Add.setString(7, pickupTime.getText());
                int rowsAffected = Add.executeUpdate();
                con.close();
                DisplayStudent();
                Clear();
                if (rowsAffected >= 1) {
                JOptionPane.showMessageDialog(this, "Student Added Successfully !!!");
                } else {
                    JOptionPane.showMessageDialog(this, "Student Not Added !!!");
                }
                
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Server Error !!!");
            }
        }
    }//GEN-LAST:event_saveBtnActionPerformed

    private void studentAgeTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentAgeTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studentAgeTxtActionPerformed

    private void homeBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeBtnMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_homeBtnMouseReleased

    private void homeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeBtnActionPerformed
       
        new Main().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_homeBtnActionPerformed

    String Key = "";
    private void studentTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentTblMouseClicked
         
        DefaultTableModel model = (DefaultTableModel)studentTbl.getModel();
        studentTbl.setModel(model);
        
        // Set the table non-editable
        studentTbl.setCellSelectionEnabled(false);
        studentTbl.setFocusable(false);
        
        int Index = studentTbl.getSelectedRow();
        
       java.sql.Date sqlDate = (java.sql.Date) model.getValueAt(Index, 5);
        java.util.Date utilDate = new java.util.Date(sqlDate.getTime());
        
        Key = model.getValueAt(Index, 0).toString();
        studentIdTxt.setText(model.getValueAt(Index, 0).toString());
        studentNameTxt.setText(model.getValueAt(Index, 1).toString());
        studentAgeTxt.setText(model.getValueAt(Index, 2).toString());
        parentCbx.setSelectedItem(model.getValueAt(Index, 3).toString());
        busCbx.setSelectedItem(model.getValueAt(Index, 4).toString());
        pickupDate.setDate(utilDate);
        pickupTime.setText(model.getValueAt(Index, 6).toString());
    }//GEN-LAST:event_studentTblMouseClicked

    private void deleteBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteBtnMouseClicked
        
        System.out.println("Key is "+Key);
        if(Key == null){
            JOptionPane.showMessageDialog(this, "Select a student to delete ");
        }else {
            try {
                con = DriverManager.getConnection(dbUrl, username, password);
                String sql = "DELETE FROM students WHERE student_id=?";
                PreparedStatement Del = con.prepareStatement(sql);
                Del.setString(1, Key);
                int rowsAffected = Del.executeUpdate();
                con.close();
                DisplayStudent();
                Clear();
                if (rowsAffected >= 1) {
                    JOptionPane.showMessageDialog(this, "student Deleted Successfully !!!");
                } else {
                    JOptionPane.showMessageDialog(this, "student Not Deleted !!!");
                }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Server error !!!");
            }
        }
    }//GEN-LAST:event_deleteBtnMouseClicked

    private void editBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editBtnMouseClicked
        
        if(Key == null){
        JOptionPane.showMessageDialog(this, "Select a student to update");
    }else if(studentIdTxt.getText().isEmpty() || studentNameTxt.getText().isEmpty() || studentAgeTxt.getText().isEmpty() 
            || parentCbx.getSelectedIndex() == -1  || busCbx.getSelectedIndex() == -1 || pickupTime.getText().isEmpty()){
        JOptionPane.showMessageDialog(this, "Incomplete information");
    }else if(studentIdTxt.getText().length() != 6 || !studentIdTxt.getText().matches("[A-Z]{3}\\d{3}")) {
        JOptionPane.showMessageDialog(this, "Student ID should be in the format 'AAA999'");
    }else if(!pickupTime.getText().matches("^(1[012]|0?[1-9]):[0-5][0-9]\\s?(?:[AP]M)?$")) {
        JOptionPane.showMessageDialog(this, "Invalid pickup time format. Please use format like '1:00 AM' or '1:00 PM'");
    }else{
        java.sql.Date pickupDates = null;

        // Get the selected date from the JDateChooser
        Date utilDate = pickupDate.getDate();
        if (utilDate != null) {
            // Convert the java.util.Date to java.sql.Date
            pickupDates = new java.sql.Date(utilDate.getTime());
            
            // Get the current date
            java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
            
            // Compare the selected date with the current date
            if (pickupDates.before(currentDate)) {
                JOptionPane.showMessageDialog(this, "You cannot schedule on an older date.");
                return; // Stop further processing
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a valid pickUp date. Stopping...");
            return; // Stop further processing if date is not selected
        }
        
        try {
            con = DriverManager.getConnection(dbUrl, username, password);
            
            int studentAge = Integer.valueOf(studentAgeTxt.getText());
            // Prepare the SQL statement for update
            String sql = "UPDATE students SET student_name=?, student_age=?, parent_id=?, bus_plate=?, bus_pickup_date=?, bus_pickup_time=? WHERE student_id=?;";
            PreparedStatement updateStatement = con.prepareCall(sql);
            
            // Set parameters for the update statement
            updateStatement.setString(1, studentNameTxt.getText());
            updateStatement.setInt(2, studentAge);
            updateStatement.setString(3, parentCbx.getSelectedItem().toString());
            updateStatement.setString(4, busCbx.getSelectedItem().toString());
            updateStatement.setDate(5, pickupDates);
            updateStatement.setString(6, pickupTime.getText());
            updateStatement.setString(7, studentIdTxt.getText());
            
            // Execute the update statement
            int rowsAffected = updateStatement.executeUpdate();
            
            // Close the connection
            con.close();

            // Display appropriate message based on update result
            if (rowsAffected >= 1) {
                JOptionPane.showMessageDialog(this, "Student Updated Successfully !!!");
            } else {
                JOptionPane.showMessageDialog(this, "Student Not Updated !!!");
            }
            
            // Refresh the student list display
            DisplayStudent();
            Clear(); // Clear input fields after update
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Server Error !!!");
        }
    }
    }//GEN-LAST:event_editBtnMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Students.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Students.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Students.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Students.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Students().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> busCbx;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JButton homeBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> parentCbx;
    private com.toedter.calendar.JDateChooser pickupDate;
    private javax.swing.JTextField pickupTime;
    private javax.swing.JButton saveBtn;
    private javax.swing.JTextField studentAgeTxt;
    private javax.swing.JTextField studentIdTxt;
    private javax.swing.JTextField studentNameTxt;
    private javax.swing.JTable studentTbl;
    // End of variables declaration//GEN-END:variables
}
