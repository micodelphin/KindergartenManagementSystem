/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package KindergartenMgtSystem;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Admin
 */
public class ArrivalNotification extends javax.swing.JFrame {

    /**
     * Creates new form ArrivalNotification
     */
    public ArrivalNotification() {
        initComponents();
        DisplayNotifications();
        GetBus();
        GetStudent();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
     String dbUrl = "jdbc:postgresql://localhost:5432/kindergarten_management_db";
    String username = "postgres";
    String password = "8585";
    
    Connection con = null;
    Statement st = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    
    
    private void GetBus(){
        
        try {
            con = DriverManager.getConnection(dbUrl, username, password);
            st = con.createStatement();
            String sql = "select * from buses;";
            rs = st.executeQuery(sql);
            while(rs.next()){
                String PlateNumber = String.valueOf(rs.getString("bus_plate"));
                busCbx.addItem(PlateNumber);
            }
            
            
        } catch (Exception e) {
            e.printStackTrace();
            

        } finally {
            try {
                // Close resources in a finally block to ensure they are closed even if an exception occurs
                if (con != null) con.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    private void GetStudent(){
        
        try {
            con = DriverManager.getConnection(dbUrl, username, password);
            st = con.createStatement();
            String sql = "select * from students;";
            rs = st.executeQuery(sql);
            while(rs.next()){
                String StudentName = String.valueOf(rs.getString("student_name"));
                studentCbx.addItem(StudentName);
            }
            
            
        } catch (Exception e) {
            e.printStackTrace();
            

        } finally {
            try {
                // Close resources in a finally block to ensure they are closed even if an exception occurs
                if (con != null) con.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    private void DisplayNotifications(){
        try {
            con = DriverManager.getConnection(dbUrl, username, password);
            String sql = "select * from notifications";
            st = con.createStatement();
            rs = st.executeQuery(sql);
            notificationTbl.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                // Close resources in a finally block to ensure they are closed even if an exception occurs
                if (con != null) con.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    
    private void Clear() {
        arrivalTime.setText("");
        if (busCbx.getSelectedItem() != null) {
            busCbx.setSelectedIndex(-1);
        }

        if (studentCbx.getSelectedItem() != null) {
            studentCbx.setSelectedIndex(-1);
        }
        if (notificationCbx.getSelectedItem() != null) {
            notificationCbx.setSelectedIndex(-1);
        }
        
    }
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        notificationTbl = new javax.swing.JTable();
        busCbx = new javax.swing.JComboBox<>();
        studentCbx = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        arrivalTime = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        notificationCbx = new javax.swing.JComboBox<>();
        homeBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        EditBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("Student  Arrival Notifications");

        jPanel1.setBackground(new java.awt.Color(51, 102, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 66, Short.MAX_VALUE)
        );

        notificationTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        notificationTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                notificationTblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(notificationTbl);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Bus Plate");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Student Name");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Arrival Time");

        arrivalTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arrivalTimeActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Notification");

        notificationCbx.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Arrived", "Not Arrived" }));

        homeBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        homeBtn.setText("Home");
        homeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeBtnActionPerformed(evt);
            }
        });

        saveBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        saveBtn.setText("Save");
        saveBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveBtnMouseClicked(evt);
            }
        });

        EditBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        EditBtn.setText("Edit");
        EditBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EditBtnMouseClicked(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        deleteBtn.setText("Delete");
        deleteBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(50, 50, 50)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(arrivalTime)
                                            .addComponent(notificationCbx, 0, 100, Short.MAX_VALUE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(48, 48, 48)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(busCbx, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(studentCbx, 0, 94, Short.MAX_VALUE))))))))
                .addGap(0, 40, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(saveBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(EditBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteBtn)
                        .addGap(49, 49, 49)
                        .addComponent(homeBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(busCbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(studentCbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(arrivalTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(notificationCbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(homeBtn)
                    .addComponent(saveBtn)
                    .addComponent(EditBtn)
                    .addComponent(deleteBtn))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void arrivalTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arrivalTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_arrivalTimeActionPerformed

    private void homeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeBtnActionPerformed
        
        new Main().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_homeBtnActionPerformed

    private void saveBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveBtnMouseClicked
        
        if(arrivalTime.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Incomplete information");
        }else if(!arrivalTime.getText().matches("^(1[012]|0?[1-9]):[0-5][0-9]\\s?(?:[AP]M)?$")) {
        JOptionPane.showMessageDialog(this, "Invalid pickup time format. Please use format like '1:00 AM' or '1:00 PM'");
    }else{
            try {
                
                con = DriverManager.getConnection(dbUrl, username, password);
                
                
                
                String sql = "INSERT INTO notifications(bus_plate, student_name, arrival_time, notification) VALUES (?, ?, ?, ?);";
                PreparedStatement Add = con.prepareCall(sql);
                Add.setString(1, busCbx.getSelectedItem().toString());
                Add.setString(2, studentCbx.getSelectedItem().toString());
                Add.setString(3, arrivalTime.getText());
                Add.setString(4, notificationCbx.getSelectedItem().toString());
                int rowsAffected = Add.executeUpdate();
                con.close();
                DisplayNotifications();
                Clear();
                if (rowsAffected >= 1) {
                    JOptionPane.showMessageDialog(this, "Notification Saved Successfully !!!");
                } else {
                    JOptionPane.showMessageDialog(this, "Notification Not Saved !!!");
                }
                
            } catch (Exception e) {
                e.printStackTrace();
                
            }
        }
    }//GEN-LAST:event_saveBtnMouseClicked

    int Key = 0;
    private void notificationTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_notificationTblMouseClicked
        
        DefaultTableModel model = (DefaultTableModel)notificationTbl.getModel();
        notificationTbl.setModel(model);
        
        // Set the table non-editable
        notificationTbl.setCellSelectionEnabled(false);
        notificationTbl.setFocusable(false);
        
        int Index = notificationTbl.getSelectedRow();
        
        Key = Integer.valueOf(model.getValueAt(Index, 0).toString());
        busCbx.setSelectedItem(model.getValueAt(Index, 1).toString());
        studentCbx.setSelectedItem(model.getValueAt(Index, 2).toString());
        arrivalTime.setText(model.getValueAt(Index, 3).toString());
        notificationCbx.setSelectedItem(model.getValueAt(Index, 4).toString());
       
        
    }//GEN-LAST:event_notificationTblMouseClicked

    private void deleteBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteBtnMouseClicked
        
         System.out.println("Key is "+Key);
        if(Key == 0){
            JOptionPane.showMessageDialog(this, "Select a Notification to delete ");
        }else {
            try {
                con = DriverManager.getConnection(dbUrl, username, password);
                String sql = "DELETE FROM notifications WHERE notification_id=?";
                PreparedStatement Del = con.prepareStatement(sql);
                Del.setInt(1, Key);
                int rowsAffected = Del.executeUpdate();
                con.close();
                DisplayNotifications();
                Clear();
                if (rowsAffected >= 1) {
                    JOptionPane.showMessageDialog(this, "Notification Deleted Successfully !!!");
                } else {
                    JOptionPane.showMessageDialog(this, "Notification Not Deleted !!!");
                }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Server error !!!");
            }
        }
    }//GEN-LAST:event_deleteBtnMouseClicked

    private void EditBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EditBtnMouseClicked
        
         
      if (Key == 0) {
        JOptionPane.showMessageDialog(this, "Select a notification to update");
    } else {
        try {
            con = DriverManager.getConnection(dbUrl, username, password);
            String sql = "UPDATE notifications SET bus_plate=?, student_name=?, arrival_time=?, notification=? WHERE notification_id=?";
            PreparedStatement update = con.prepareStatement(sql);
            update.setString(1, busCbx.getSelectedItem().toString());
            update.setString(2, studentCbx.getSelectedItem().toString());
            update.setString(3, arrivalTime.getText());
            update.setString(4, notificationCbx.getSelectedItem().toString());
            update.setInt(5, Key); // Assuming Key is the bus_id
            int rowsAffected = update.executeUpdate();
            con.close();
            DisplayNotifications();
            Clear();
            if (rowsAffected >= 1) {
                JOptionPane.showMessageDialog(this, "Notification updated successfully");
            } else {
                JOptionPane.showMessageDialog(this, "Notification not updated");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Server error");
        }
    }
    }//GEN-LAST:event_EditBtnMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArrivalNotification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArrivalNotification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArrivalNotification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArrivalNotification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ArrivalNotification().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton EditBtn;
    private javax.swing.JTextField arrivalTime;
    private javax.swing.JComboBox<String> busCbx;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton homeBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> notificationCbx;
    private javax.swing.JTable notificationTbl;
    private javax.swing.JButton saveBtn;
    private javax.swing.JComboBox<String> studentCbx;
    // End of variables declaration//GEN-END:variables
}
